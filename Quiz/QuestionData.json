[
	{
		"question":"You need to join the Apple Developer Program in order to install your app onto your device ",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":1,
		"lesson":0,
		"feedback":"The Apple Developer Program costs $99/year from Apple and it allows you to publish apps to the App Store and also to install your apps on a real device."
	},
	{
		"question":"What is Xcode? ",
		"answers":["An app on your iPhone.", "The development environment where we'll build our app.", "The site where you publish your app."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"Xcode is the app where we write our code and build our apps. It's downloaded from the Mac App Store."
	},
	{
		"question":"Where can you get the iOS simulator?",
		"answers":["Get it from the Apple Dev Center.", "It comes with Xcode.", "Download it from the Mac App Store."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The iOS simulator is used for simulating and testing your Xcode project. It comes with Xcode."
	},
	{
		"question":"What is Swift?",
		"answers":["The programming language we used to express logic in our app.", "A quick way to build apps.", "The same thing as Objective-C."],
		"correctIndex":0,
		"module":1,
		"lesson":0,
		"feedback":"Swift is Apple's new programming language used to build iOS apps. We write Swift code in Xcode to express the logic of our app."
	},
	{
		"question":"What is a playground?",
		"answers":["An area to build your app.", "An area to quickly experiment with code.", "A place to play."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"Playgrounds are a quick and easy way to experiment with code. It is a separate file and is not part of your Xcode app project."
	},
	{
		"question":"How do you start a new playground?",
		"answers":["Launch Xcode.", " From the File->New File menu.", "From the Xcode welcome dialog or the File->New menu."],
		"correctIndex":2,
		"module":1,
		"lesson":0,
		"feedback":"You can start a new playground file from the Xcode welcome dialog or by going to the File->New menu."
	},
	{
		"question":"What is a string?",
		"answers":["A piece of text.", "Yarn?", "Similar to threads."],
		"correctIndex":0,
		"module":1,
		"lesson":0,
		"feedback":"A string is a piece of text in Swift code."
	},
	{
		"question":"Where is the file navigator for the project?",
		"answers":["The pane on the right side.", "The pane on the left side.", "The center pane."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The file navigator is the pane in the left side."
	},
	{
		"question":"Where is the code editor where you write code for your project? ",
		"answers":["The code editor is the big pane in the center.", "The code editor is the storyboard.", "The code editor is hidden until needed."],
		"correctIndex":0,
		"module":1,
		"lesson":0,
		"feedback":"The code editor area in Xcode is the front and center pane. It turn into Interface Builder when you're looking at a Storyboard file. If you're looking at a Swift file, it'll show you the text editor."
	},
	{
		"question":"How do you run your Xcode project?",
		"answers":["Launch your app from the iOS simulator.", "Click the 'Play' icon in the upper left corner or press CMD+R.", "Launch the iOS simulator to install your app."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"You can run your Xcode project (which launches your app in the simulator) by clicking the 'Play' icon in the upper left corner or by pressing CMD R on your keyboard."
	},
	{
		"question":"What is the pane on the right hand side used for?",
		"answers":["Shows the files in your Xcode project.", "Displays configurable attributes and a library of elements when you're looking at a Storyboard.", "Shows you the errors when running your project."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The Inspector pane is the one on the right hand side. When viewing a Storyboard file, it shows you the configurable properties for the selected UI Element and also contains the library of elements that you can drag and drop onto your view."
	},
	{
		"question":"What is the model responsible for?",
		"answers":["Passing the data to the view.", "Providing data models.", "Managing the data required for the view."],
		"correctIndex":2,
		"module":1,
		"lesson":0,
		"feedback":"The model component in the MVC design pattern is responsible for managing the data. It should not directly communicate with the view."
	},
	{
		"question":"What is the view responsible for?",
		"answers":["Communicating with the model to display the data.", "Displaying the user interface to the user.", "Viewing the elements."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The view component of the MVC design pattern is responsible for displaying the user interface to the user. It should not directly communicate with the model."
	},
	{
		"question":"What is the controller responsible for?",
		"answers":["It facilitates the communication between the model and the view.", "It controls the data.", "It displays the user interface."],
		"correctIndex":0,
		"module":1,
		"lesson":0,
		"feedback":"The controller component of the MVC design pattern sits in between the model and the view and is responsible for facilitating the communication between them."
	},
	{
		"question":"Why do we use the MVC design pattern with our app architecture?",
		"answers":["It's the way that Apple told us to do it.", "Easier to maintain and debug code.", "Makes it so that we can use Storyboards."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"We use the model view controller pattern with our app architecture because it allows components to be individually debugged and maintained. This results in less time spent on doing updates and fixing bugs."
	},
	{
		"question":"What is the Storyboard?",
		"answers":["It charts the interaction of our app.", "It describes the app flow and user interfaces (views) in our app.", "It's used for storyboarding our app."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The storyboard represents the views in our app and how they flow from one to the next. When you view your storyboard, the code editor area turns into Interface Builder."
	},
	{
		"question":"What is the app delegate?",
		"answers":["Delegates the work of the app.", "Gives you a chance to write code against application events.", "Controls the flow of the app."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"The app delegate handles some of the major app events such as launch, termination, going into the background and coming back into the foreground as the active app. In the app delegate, you can write some code to execute upon these events happening."
	},
	{
		"question":"What is Images.xcassets?",
		"answers":["The place where we create the images for our app.", "It's the asset library where we add the images that we will use in our app.", "The asset library where we can edit and crop images."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"Images.xcassets is the asset library for the Xcode project. You add images to the project through here and it helps you manage the various image asset resolutions for the different iPhone screen sizes."
	},
	{
		"question":"What is ViewController.swift?",
		"answers":["It controls all the views in the app.", "It manages the view and facilitates communication between the view and the model.", "It contains all of the logic for the app."],
		"correctIndex":1,
		"module":1,
		"lesson":0,
		"feedback":"ViewController.swift manages the single view in the storyboard. In the future, when you more data and implement a model, it'll manage the communication between the model and view. Furthermore, a single view controller manages a single view. In the future when we have multiple screens in our app, we'll have multiple view controllers."
	},
	{
		"question":"What is auto layout?",
		"answers":["It's a way to describe the layout of the view using 'rules'.", "It a system that automatically positions your user interface elements.", "It's a system that describes the position of your user interface using coordinates and values."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Auto Layout is the system that describes using constraints (rules) how the user interface elements are arranged on the view."
	},
	{
		"question":"What is a constraint?",
		"answers":["Describes the x and y position where an element should be placed.", "A constraint is a 'rule' that governs how an element should be arranged on the view.", "Constrains the user interface element to a fixed position."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"A constraint is a rule that is applied to a user interface element to govern how it arranges itself on the view. An element can have multiple constraints to describe it's position and size."
	},
	{
		"question":"How do you delete a constraint?",
		"answers":["In the document outline.", "By right clicking the element and deleting it from the pop up menu.", "By overwriting it with a new constraint."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"In the document outline in the storyboard, you can expand the nodes to reveal the constraints. Then select one and delete it."
	},
	{
		"question":"How do you add new constraints to an element?",
		"answers":["By dragging a constraint from the object library onto the element.", "By right clicking an element and using the pop up menu.", "Using the pin and align icons in the lower toolbar in your Storyboard."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"Click an element to select it, then use the pin and align icons along the lower toolbar in the Storyboard. You can also use the Editor menu up top."
	},
	{
		"question":"What is a class?",
		"answers":["A class is a classification of something in your project.", "A class is a document in your project that describes a component in your app.", "A class is the same thing as an object."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"A class is something that you create in your project that describes a component of your app. You can then write Swift code in it to describe it's functionality and behavior."
	},
	{
		"question":"What is an object?",
		"answers":["An object is the same thing as a class.", "An object is an instance of a class.", "An object is a component of your app."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"An object is an instance of a class. You can create multiple objects from a class. It's these objects that interact with each other to carry out the functionality of your app."
	},
	{
		"question":"What is a method?",
		"answers":["A set of instructions that will be executed when the app runs.", "A named set of instructions that will be executed when called.", "A way of carrying out a task."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"A class can contain multiple methods. Each method has a name and a set of instructions (code). When that name is called, the set of instructions is executed. Methods can also accept input and return output."
	},
	{
		"question":"What is a property?",
		"answers":["Allows a class to keep track of a value or object", "A variable.", "An attribute that helps describe a class."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"A property is something we can create for a class in order to allow it to store a value or keep track of another object."
	},
	{
		"question":"What is UIKit?",
		"answers":["A set of classes provided by Apple to help us build apps.", " Describes the user interface of the project.", "A system to lay out the user elements of our view."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"UIKit is a set of essential classes provided by Apple that we use to build our apps with. It contains user interface elements as well as the classes for views and controllers."
	},
	{
		"question":"What is a subclass?",
		"answers":["A class that inherits the methods and properties of another class.", "A class that is identical to another class.", "A subset of another class."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"A subclass is a way to extend another class or to create a similar class without having to rewrite a lot of code. A subclass extends a parent class (superclass) and inherits all of its methods and properties."
	},
	{
		"question":"What does the 'super' keyword refer to?",
		"answers":["It refers to the object.", "It refers to the subclass.", "It refers to the parent class (superclass)."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"The super keyword refers to the superclass. It is used to call the parents implementation of the methods and properties."
	},
	{
		"question":"What is method overriding?",
		"answers":["Executes both the method in the subclass and superclass.", "Allows a subclass to have a custom implementation of a method.", "Changes both the method in the subclass and superclass."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"Using the override keyword allows a subclass to have a custom implementation of a method, different from its parent's."
	},
	{
		"question":"How do you expose the elements in the Storyboard to be accessed by the view controller?",
		"answers":["Using variables.", "Using IBOutlet properties.", "Using properties."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"You can expose elements in the Storyboard to be referenced and manipulated with code by connecting them to IBOutlet properties which are declared in the view controller class."
	},
	{
		"question":"How do you create an IBOutlet property?",
		"answers":["By opening up assistant editor view and using the drag and drop method.", "By dragging an IBOutlet element from the objects pane onto your element.", "By configuring the element in the Inspector pane."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"You can connect an element and create an IBOutlet property at the same time by opening up assistant editor view, clicking your element and dragging and dropping it into the area in your view controller class where you would declare a property."
	},
	{
		"question":"What happens when you delete a connected IBOutlet but forget to disconnect the element from it?",
		"answers":["Nothing happens.", "Your element won't be able to be accessed by the code.", "Your app crashes."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"Many beginners forget to disconnect the element from their deleted properties and their app crashes when the project is run. Right click the element in the storyboard and click the 'x' next to the connection to break it."
	},
	{
		"question":"How do you access a property using Swift code?",
		"answers":["Using the property name on it's own.", "Using the arrow '->' notation.", "Using the dot '.' notation."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"You can access the property in Swift code by using the dot notation and following this syntax: object.property"
	},
	{
		"question":"What is an IBAction?",
		"answers":["Denotes a method that can be connected to an event of an element in the Storyboard.", "It's an action that automatically occurs when a UI (user interface) element occurs.", "Describes an action method."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"By using the IBAction keyword next to a method implementation, it denotes that that method can be connected to an event of an element in the Storyboard."
	},
	{
		"question":"How do you create an IBAction method and connect it to a button?",
		"answers":["Configure an IBAction method from the Inspector pane for the button element.", "Open up assistant editor view and use the drag and drop method.", "Add an IBAction element from the objects pane to your button."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"You can create an IBAction method and connect it to the button in one go by opening up assistant editor view, clicking your button and then holding down ctrl and dragging and dropping to an area in your view controller where you could declare a method."
	},
	{
		"question":"What is the button event that you want to handle for button taps?",
		"answers":["Touch Down", " Touch Up Outside", "Touch Up Inside"],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"Touch up inside is the event where the user touches the button and releases while the finger is still within the bounds of the button. This is the event that represents a tap."
	},
	{
		"question":"What is the sender parameter in the button handler method?",
		"answers":["It's a reference to the button that triggered the event", "It's the sender element.", "It's not used."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"The sender parameter gives you a reference to the button element that triggered the event."
	},
	{
		"question":"Why do you have to provide multiple sizes of the same image?",
		"answers":["For different zoom levels.", "For scaling purposes.", "There are iOS devices with different resolutions."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"You need to provide multiple sizes of the same image assets because of the various screen resolutions of different iOS devices."
	},
	{
		"question":"What is the suffix that you add to the image filename to specify that it's for the higher resolutions?",
		"answers":["Use '@2x' and '@3x'.", "Use '_retina'.", "Use '_hi'."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Use @2x to specify the image asset that is two times as large and use @3x for three times as large."
	},
	{
		"question":"After adding the image to the asset library, how do you reference it in your app?",
		"answers":["By the filename.", "Both are acceptable.", "By the image asset name."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"You specify the image by the asset name that you specified when you added it to the asset library."
	},
	{
		"question":"What is the UIImage class?",
		"answers":["It's a class that represents the image asset library.", "It's a class that displays the image in the user interface.", "It's a class that specifies the image data."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"The UIImage class is a class in the UIKit framework that is used to house the image data. You can create a new UIImage object and initialize it to one of the images in the asset library. Then you can assign the UIImage object to a UIImageView to display it."
	},
	{
		"question":"The format initializer of the String class allows you to create a String and substitute data into wildcards characters.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Using '%@' and other wildcard characters, we can use the format initializer of the String class to create a dynamic string that has data substituted into the wildcard placeholders at the time of creation."
	},
	{
		"question":"The arc4random_uniform function allows you to generate random numbers.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"This function returns a random number between 0 and the upper bound which you specify when calling the function."
	},
	{
		"question":"'%i' is the wild card for integer data in a string format.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Use the wildcard '%i' in a format initializer to replace it with integer data."
	},
	{
		"question":"'%@' is the wildcard character for text data in a string format.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Use the wildcard '%@' in a format initializer to replace it with text data."
	},
	{
		"question":"What is an array?",
		"answers":["A list of variables.", "A collection class used to manage a list of objects.", "An actual list of objects."],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"An array is a class that is used to manage a collection of objects. It provides insertion and deletion operations and allows access to the objects by index."
	},
	{
		"question":"How do you access an object in an array?",
		"answers":["Use the dot notation to specify the index to retrieve.", "Use the return method of the array.", "Use the square bracket notation with the index specified."],
		"correctIndex":2,
		"module":2,
		"lesson":0,
		"feedback":"You can access an object of the array by using square brackets with the index number in between such as: array[3] to access the 4th item. (arrays start at index zero)"
	},
	{
		"question":"The first item in an array is at index 0.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"Arrays are zero based so the first item is at index zero."
	},
	{
		"question":"How do you append items to the array?",
		"answers":["Use the '+=' syntax or the append method of the array.", "Use the insert method of the array.", "Specify an index that doesn't exist and assign an object to it."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"You can use the ' =' syntax to append an object to the end of the array or use the append method and pass in the object to add."
	},
	{
		"question":"An IF statement must always have an 'else' branch.",
		"answers":["True", "False"],
		"correctIndex":1,
		"module":2,
		"lesson":0,
		"feedback":"The 'else' clause is an optional part of an IF statement."
	},
	{
		"question":"An IF statement can have as many 'else if' branches as necessary.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"'Else if' clauses are optional and you can have one or many."
	},
	{
		"question":"Only a single branch of an IF statement will ever be executed.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"An IF statement may contain as many 'else if' or 'else' branches as necessary but the first condition that is true will have that branch executed and no other branch will be executed."
	},
	{
		"question":"What is the '&&' symbol?",
		"answers":["It is the 'AND' operator and allows you to specify that both conditions must be satisfied.", "It is the 'OR' operation and allows you to specify that only one of the conditions must be satisfied.", "It is specifies that one of the conditions is optional."],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"The '&&' operator allows you to specify that both conditions must be true."
	},
	{
		"question":"A variable declared inside a method can only be referenced in that method.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":2,
		"lesson":0,
		"feedback":"When declared in the scope of a method, it is known as a local variable and can only be referenced and used within that method."
	},
	{
		"question":"If you want to create a custom class which can be displayed on the view, you can subclass UIView.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"Subclassing UIView gives your class the methods and properties of a basic view which can be placed onto the view."
	},
	{
		"question":"When you want to create a new class in your Swift project which type of new file do you select?",
		"answers":["Swift File", "Cocoa Touch Class", "Objective-C File"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"Choose Cocoa Touch Class. The other ones will give you an empty file."
	},
	{
		"question":"When you want to create a custom class that has non view, you can subclass NSObject",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"NSObject is the root class of all the UIKit classes. This is the class that you want to subclass if no other UIKit classes are more suitable for the intention of your new class."
	},
	{
		"question":"This is the syntax for a subclass: 'class MySubclass -> UIView'",
		"answers":["True", "False"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The correct syntax for subclassing is with a colon: 'class MySubclass : UIView'"
	},
	{
		"question":"What is the view hierarchy",
		"answers":["It's the UIKit hierarchy of views.", "It's the tree-like stack of views and subviews that comprise the overall view that the user sees", "It's a ranking of views in the priority sequence."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The view hierarchy is what we call the stack of views that exist in our storyboard."
	},
	{
		"question":"The UIView can contain subviews.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The UIView class is a container view that can contain other elements as subviews."
	},
	{
		"question":"The root view of the view hierarchy is a UIView.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The root node of the entire view hierarchy is a UIView."
	},
	{
		"question":"UIViews can contain other UIViews.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"UIViews can contain other UIViews as subviews."
	},
	{
		"question":"The view we build using the storyboard can all be done programmatically.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"We can create and add elements onto the view without the use of the storyboard by using the addSubview method of the root UIView."
	},
	{
		"question":"What is the method we use to add subviews to a UIView?",
		"answers":["addView", "addSubclass", "addSubview"],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"addSubview is the correct method to use in order to add a subview to a UIView."
	},
	{
		"question":"How can you access the root view from the view controller?",
		"answers":["The view controller can use the 'rooview' property to access it.", "The view controller has a reference to the root view through the 'view' property.", "The view controller can reference the storyboard to access the root view."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The view controller has a 'view' property which the root view is assigned to."
	},
	{
		"question":"The UIView has a 'subviews' property which is an array of all of its subviews.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The 'subviews' property of the UIView is an array of all of its subviews."
	},
	{
		"question":"You can manually tell the scrollview the size of its content using the ContentSize property.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The contentSize property of the scrollview allows you to specify the size of its content."
	},
	{
		"question":"You can use the addSubview method to add content into the scrollview.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The UIScrollview has a addSubview method to add content to it."
	},
	{
		"question":"The scrollview will scroll even if its content is smaller than the scrollview itself.",
		"answers":["True", "False"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The scrollview will only scroll if its content is larger than the scrollview itself."
	},
	{
		"question":"When is the init with coder parameter method called?",
		"answers":["When a new object of it is created programmatically.", "When an instance of it (object) is created from the storyboard.","When you manually call the init method."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The init with coder parameter method is called when an object of that class is created from the storyboard."
	},
	{
		"question":"Why do we need to add the init with coder parameter method?",
		"answers":["Because it's a subclass of NSObject.", "Because it's subclassing a class of UIKit.", " Because it's a subclass of UIView and can be placed on the storyboard."],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"This special init method is required when you subclass a class that can be placed on the storyboard."
	},
	{
		"question":"How do we add the custom Card class to the storyboard?",
		"answers":["By adding an element to the storyboard that it's a subclass of and setting the 'custom class' property in the inspector pane.", "By dragging a UIView to the storyboard","By searching for 'Card' in the library pane and dragging it to the storyboard."],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"You can add a custom view to the storyboard by adding it's subclass to the storyboard and then setting the 'custom class' property in the inspector pane to your custom class. In the case of our Card class, the subclass is UIView so you would add a UIView element to the storyboard."
	},
	{
		"question":"Why are we adding the Cards programmatically to the view, rather than via the Storyboard?",
		"answers":[" Because it's the only way to do it.", "So that we can make adjustments more easily to the positioning of all the cards.", "To make it more challenging for ourselves."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"If we need to update the positions of the cards, we can simply change a couple of numbers programmatically (if the cards were laid out programmatically). If we visually laid them out in the Storyboard, any changes would require a lot more time spent on tweaking values in the Storyboard for each individual card view."
	},
	{
		"question":"How does the view controller get the card objects from the game model?",
		"answers":[" It creates the Card objects in the view controller.", "It creates a GameModel object and calls its getCards method.", " It calls the getCards method of the GameModel class."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The view controller creates an instance of the GameModel before it calls its getCards method which returns an array of Card objects."
	},
	{
		"question":"Why don't we declare a variable inside the viewDidLoad and assign the returned array of Cards objects to it?",
		"answers":[" Because return values from methods can't be assigned to local variables.", "Because the Card array would be assigned to a local variable which is inaccessible outside of that method.", "Because arrays must be assigned to properties."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"We anticipate needing to access those Card objects from other methods aside from viewDidLoad so we need to use a property to track the returned Card objects. If we used a local variable inside the viewDidLoad method, it's scope is only in that method and we won't be able to reference those Card objects from another method."
	},
	{
		"question":"What keyword do we use to return values in a method implementation?",
		"answers":["final", "return", "result"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"If a method specifies a return value, it must use the 'return' keyword inside of the method implementation to specify which value is returned."
	},
	{
		"question":"Code statements underneath a return statement in a method will never be executed.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"After a return statement in a method, the execution is returned back to the caller and nothing else in that method will be executed."
	},
	{
		"question":"In the old coordinate system, where is the origin (0,0) located?",
		"answers":["Upper right corner.", "Lower left corner.", "Upper left corner.", " Lower right corner."],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"The upper left corner is 0,0 in the old coordinate system."
	},
	{
		"question":"How do you turn off Autolayout in your view?",
		"answers":["Select your view controller in the storyboard and uncheck Use Autolayout in the inspector pane.", "Select your view in the storyboard and uncheck Use Autolayout in the inspector pane.", "Uncheck autolayout when you create your Xcode project."],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"You can turn off Autolayout in the inspector pane of the view controller."
	},
	{
		"question":"By default, the frame of your view is (0,0,0,0) when you create a new object and you don't specify a frame.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"When you create an object (a class that descends from UIView), by default the frame will be (0,0,0,0) if you don't use the init with frame method and specify a frame."
	},
	{
		"question":"We need to specify the overridden init with frame method for the Card class because it's a view.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"Because the Card class is a descendant of UIView (meaning it subclasses it directly or indirectly), it has a frame and when you create a new Card object with the basic initializer, it still calls the init with frame with an empty frame."
	},
	{
		"question":"The Autoresizing Mask in the old layout system allows you to control how the view stretches and which margins should be anchored.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The Autoresizing Mask is part of the old layout system that allows you to dictate how a view behaves when the view containing it changes size."
	},
	{
		"question":"What is the type of loop that will execute its statements before checking if it should loop again?",
		"answers":["For-in loop", "While loop", "Do-while loop", "For loop"],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"The do-while loop will execute its statements first before checking the condition to see if it should loop."
	},
	{
		"question":"What's an easy way to loop through each item in an array?",
		"answers":["Use the while loop.", "Use the do-while loop.", "Use the for-in loop."],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"With the for-in loop, you can easily iterate through the array items like this: for item in myArray { }"
	},
	{
		"question":"If you need a loop which executes a fixed number of times, which loop is best?",
		"answers":["The for or for-in loop", "The do-while loop", "The while loop"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"For counted loops, the for or for-in loops are best."
	},
	{
		"question":"Which tool do we use to pause the execution of our app at a certain line of code?",
		"answers":["Debug area", "Tracing", "Breakpoints", "Console logging"],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"Breakpoints allow us to stop the execution at a line of code."
	},
	{
		"question":"How do you add a new breakpoint?",
		"answers":["Select Add Breakpoint from the menu.", "Highlight the line of code and add breakpoint from the breakpoint button.", "Click in the left gutter beside the line of code you want to add a breakpoint on."],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"You can simply click in the gutter beside the line of code to add a new breakpoint. You can disable it by click it again or remove it by dragging it off of the gutter."
	},
	{
		"question":"What is the command to print an object in the console? ",
		"answers":["po", "pobj", "printo"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"po followed by a space and then the variable or property name will print out the object referenced by that variable/property."
	},
	{
		"question":"When you 'step over' a line of code that performs a method call, it executes it but moves to the next line below it.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"If you step over a method call, it still performs that line of code. However, you just move to the next line instead of moving INTO the method code. Step INTO will move you into the method code."
	},
	{
		"question":"When you add size constraints, you add them to the element. ",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"Size constraints should be added to the element it applies to using the addConstraint method."
	},
	{
		"question":"When you add position/alignment constraints, they should be added to the element.",
		"answers":["True", "False"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"Position and alignment constraints should be added to the view containing the element using the addConstraint method."
	},
	{
		"question":"You have to add the element to the view before you add position/alignment constraints to its container view. ",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"If you don't add the element to the container view before adding positioning/alignment constraints, the app will crash because it will try to apply those constraints to an element that isn't in the view hierarchy."
	},
	{
		"question":"When adding constraints programmatically, you should setTranslatesAutoresizingMaskIntoConstraints to false.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"You should set it to false if you're using auto layout because otherwise, the auto generated constraints from the autoresizingmask may conflict with the ones that you add."
	},
	{
		"question":"What is the class to add a tap handler to a view?",
		"answers":["UITapGestureRecognizer", "TapGestureRecognizer", "TapRecognizer"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"UITapGestureRecognizer is the right class to use for handling taps on views."
	},
	{
		"question":"Your gesture recognizer may not work on a UIImageView if its 'user interaction enabled' property is false.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The UIImageView has the 'user interaction enabled' property set to false by default. If you intend to attach a gesture recognizer to it, you need to set this property to true."
	},
	{
		"question":"What is a selector?",
		"answers":["A selector is a way to specify the method to be called.", "A selector is a control that provides multiple options for selection.", "A selector chooses the best method to execute."],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"A selector allows you to specify a method when some classes (like the gesture recognizers) ask for a target method."
	},
	{
		"question":"If handling taps on multiple views, each view needs its own recognizer object.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"You need to create a recognizer object for each view that you need to handle. However, the handler method you specify can be used as the target of multiple recognizers."
	},
	{
		"question":"What is an optional type?",
		"answers":["Specifying the type is optional.", "It can contain either a value or no value.", "Allows a variable to track multiple types of classes."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"An optional type may contain an empty value."
	},
	{
		"question":"How do you specify an optional type?",
		"answers":["Add '?' to the end of the variable type.", "Add '?' to the front of the variable type.", "Use the 'opt' keyword in front of the variable."],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"Add '?' to the end of the variable type to specify that the variable holds an optional type and may contain a nil value."
	},
	{
		"question":"What is a property observer?",
		"answers":["Allows you to be notified when a property is changed.", "Allows you to watch for changes in a property.", "Allows you to specify code to execute when a property is set or will be set."],
		"correctIndex":2,
		"module":3,
		"lesson":0,
		"feedback":"A property observer is a mechanism that allows you to respond to a property being set. You can run a code block right before the property is set or right after it's set."
	},
	{
		"question":"By using the '!' symbol in a property declaration you're indicating that this property will contain a value.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"The '!' symbol in a property declaration is a way to indicate to Xcode that this will contain a value."
	},
	{
		"question":"The return keyword in a method returns the execution to the caller.",
		"answers":["True", "False"],
		"correctIndex":0,
		"module":3,
		"lesson":0,
		"feedback":"When the return keyword is executed in a method, none of the code below it will be executed and control is passed back to the caller to continue execution."
	},
	{
		"question":"What is the class used for timers?",
		"answers":["Timer", "NSTimer", "UITimer"],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The NSTimer class allows us to fire a handler method at any specified interval."
	},
	{
		"question":"How do you stop a timer?",
		"answers":["Use the pause method of the timer.", "Use the invalidate method of the timer.", "Use the stop method of the timer."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The invalidate method of the NSTimer class is used to terminate the timer."
	},
	{
		"question":"How can you schedule a timer?",
		"answers":["Use the runTimerWithInterval method.", "Use the scheduledTimerWithTimeInterval type method.", "Use the schedule method."],
		"correctIndex":1,
		"module":3,
		"lesson":0,
		"feedback":"The NSTimer class has a type method called 'scheduledTimerWithTimeInterval' which will create a timer and schedule it as well."
	}


]